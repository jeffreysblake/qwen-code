// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ShellTool > getDescription > should return the non-windows description when not on windows 1`] = `
"
    This tool executes a given shell command as \`bash -c <command>\`. 

      **CRITICAL: Background vs Foreground Execution Decision:**
      You MUST correctly choose between background and foreground execution based on command behavior:

      **ALWAYS use background execution (is_background: true) for:**
      - Development servers: \`npm run start\`, \`npm run dev\`, \`yarn dev\`, \`bun run start\`, \`python manage.py runserver\`
      - Build watchers: \`npm run watch\`, \`webpack --watch\`, \`tsc --watch\`, \`rollup --watch\`
      - Database servers: \`mongod\`, \`mysql\`, \`redis-server\`, \`postgres\`
      - Web/application servers: \`python -m http.server\`, \`php -S localhost:8000\`, \`ruby -run -httpd\`
      - File watchers/monitors: \`nodemon\`, \`watchman\`, \`fswatch\`
      - Any command that runs continuously until manually interrupted (Ctrl+C)

      **ALWAYS use foreground execution (is_background: false) for:**
      - File operations: \`ls\`, \`cat\`, \`grep\`, \`find\`, \`cp\`, \`mv\`, \`rm\`, \`mkdir\`
      - Build/compile commands: \`npm run build\`, \`make\`, \`cargo build\`, \`go build\`, \`tsc\`
      - Package management: \`npm install\`, \`pip install\`, \`yarn add\`, \`cargo add\`
      - Git operations: \`git commit\`, \`git push\`, \`git pull\`, \`git status\`, \`git log\`
      - Test execution: \`npm test\`, \`pytest\`, \`cargo test\`, \`go test\`, \`jest\`
      - Utility commands: \`curl\`, \`wget\`, \`echo\`, \`which\`, \`pwd\`, \`whoami\`
      - Any command that completes a task and exits naturally

      Command is executed as a subprocess that leads its own process group. Command process group can be terminated as \`kill -- -PGID\` or signaled as \`kill -s SIGNAL -- -PGID\`.

      The following information is returned:

      Command: Executed command.
      Directory: Directory (relative to project root) where command was executed, or \`(root)\`.
      Stdout: Output on stdout stream. Can be \`(empty)\` or partial on error and for any unwaited background processes.
      Stderr: Output on stderr stream. Can be \`(empty)\` or partial on error and for any unwaited background processes.
      Error: Error or \`(none)\` if no error was reported for the subprocess.
      Exit Code: Exit code or \`(none)\` if terminated by signal.
      Signal: Signal number or \`(none)\` if no signal was received.
      Background PIDs: List of background processes started or \`(none)\`.
      Process Group PGID: Process group started or \`(none)\`"
`;

exports[`ShellTool > getDescription > should return the windows description when on windows 1`] = `
"
    This tool executes a given shell command as \`cmd.exe /c <command>\`.

      **CRITICAL: Background vs Foreground Execution Decision:**
      You MUST correctly choose between background and foreground execution based on command behavior:

      **ALWAYS use background execution (is_background: true) for:**
      - Development servers: \`npm run start\`, \`npm run dev\`, \`yarn dev\`, \`bun run start\`, \`python manage.py runserver\`
      - Build watchers: \`npm run watch\`, \`webpack --watch\`, \`tsc --watch\`, \`rollup --watch\`
      - Database servers: \`mongod\`, \`mysql\`, \`redis-server\`, \`postgres\`
      - Web/application servers: \`python -m http.server\`, \`php -S localhost:8000\`, \`ruby -run -httpd\`
      - File watchers/monitors: \`nodemon\`, \`watchman\`, \`fswatch\`
      - Any command that runs continuously until manually interrupted (Ctrl+C)

      **ALWAYS use foreground execution (is_background: false) for:**
      - File operations: \`ls\`, \`cat\`, \`grep\`, \`find\`, \`cp\`, \`mv\`, \`rm\`, \`mkdir\`
      - Build/compile commands: \`npm run build\`, \`make\`, \`cargo build\`, \`go build\`, \`tsc\`
      - Package management: \`npm install\`, \`pip install\`, \`yarn add\`, \`cargo add\`
      - Git operations: \`git commit\`, \`git push\`, \`git pull\`, \`git status\`, \`git log\`
      - Test execution: \`npm test\`, \`pytest\`, \`cargo test\`, \`go test\`, \`jest\`
      - Utility commands: \`curl\`, \`wget\`, \`echo\`, \`which\`, \`pwd\`, \`whoami\`
      - Any command that completes a task and exits naturally

      

      The following information is returned:

      Command: Executed command.
      Directory: Directory (relative to project root) where command was executed, or \`(root)\`.
      Stdout: Output on stdout stream. Can be \`(empty)\` or partial on error and for any unwaited background processes.
      Stderr: Output on stderr stream. Can be \`(empty)\` or partial on error and for any unwaited background processes.
      Error: Error or \`(none)\` if no error was reported for the subprocess.
      Exit Code: Exit code or \`(none)\` if terminated by signal.
      Signal: Signal number or \`(none)\` if no signal was received.
      Background PIDs: List of background processes started or \`(none)\`.
      Process Group PGID: Process group started or \`(none)\`"
`;
